# generated by patch-package 6.4.10
#
# command:
#   npx patch-package solid-js-form
#
# declared package:
#   solid-js-form: 0.1.5
#
diff --git a/node_modules/solid-js-form/lib/index.jsx b/node_modules/solid-js-form/lib/index.jsx
index 6c67944..c122729 100644
--- a/node_modules/solid-js-form/lib/index.jsx
+++ b/node_modules/solid-js-form/lib/index.jsx
@@ -7,9 +7,7 @@ export function Form(props) {
     const errors = Object.keys(props.initialValues).reduce((e, f) => ({ ...e, [f]: "" }), {});
     const required = Object.keys(props.initialValues).reduce((r, f) => {
         let isRequired = false;
-        const validationFields = Yup.object()
-            .shape(props.validation || {})
-            .describe().fields;
+        const validationFields = props.validationSchema ? props.validationSchema.describe().fields: {};
         if (Object.keys(validationFields).length) {
             const field = validationFields[f];
             isRequired = !!field?.tests.find(({ name }) => name === "required");
@@ -40,10 +38,9 @@ export function Form(props) {
         }
     };
     const validateForm = async (form) => {
-        if (!props.validation)
+        if (!props.validationSchema)
             return {};
-        return Yup.object()
-            .shape(props.validation)
+        return props.validationSchema
             .validate(form.values, { abortEarly: false })
             .then(() => {
             setForm("isValid", true);
diff --git a/node_modules/solid-js-form/lib/types/index.d.ts b/node_modules/solid-js-form/lib/types/index.d.ts
index 9ccd44a..9594fc1 100644
--- a/node_modules/solid-js-form/lib/types/index.d.ts
+++ b/node_modules/solid-js-form/lib/types/index.d.ts
@@ -44,7 +44,7 @@ export declare namespace FormType {
     type Props<ValuesType extends object = any> = {
         initialValues: ValuesType;
         onSubmit?: (form: Store<FormType.Context<ValuesType>>) => Promise<void>;
-        validation?: FormType.ValidationSchema<ValuesType>;
+        validationSchema?: Yup.ObjectSchema;
     } & {
         children?: JSXElement | ((form: Store<FormType.Context<ValuesType>>) => JSXElement);
     };
